// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_contract.proto
// </auto-generated>
// Original file comments:
// *
// MultiToken contract.
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace AElf.Contracts.MultiToken {
  public static partial class TokenContract
  {
    static readonly string __ServiceName = "token.TokenContract";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.CreateInput> __Marshaller_token_CreateInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.CreateInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.IssueInput> __Marshaller_token_IssueInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.IssueInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.TransferInput> __Marshaller_token_TransferInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.TransferInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.TransferFromInput> __Marshaller_token_TransferFromInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.TransferFromInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.ApproveInput> __Marshaller_token_ApproveInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.ApproveInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.BatchApproveInput> __Marshaller_token_BatchApproveInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.BatchApproveInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.UnApproveInput> __Marshaller_token_UnApproveInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.UnApproveInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.LockInput> __Marshaller_token_LockInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.LockInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.UnlockInput> __Marshaller_token_UnlockInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.UnlockInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.BurnInput> __Marshaller_token_BurnInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.BurnInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput> __Marshaller_token_SetPrimaryTokenSymbolInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.CrossChainTransferInput> __Marshaller_token_CrossChainTransferInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.CrossChainTransferInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput> __Marshaller_token_CrossChainReceiveTokenInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput> __Marshaller_token_CrossChainCreateTokenInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.InitializeFromParentChainInput> __Marshaller_token_InitializeFromParentChainInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.InitializeFromParentChainInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.TotalTransactionFeesMap> __Marshaller_token_TotalTransactionFeesMap = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.TotalTransactionFeesMap.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput> __Marshaller_token_ChargeTransactionFeesInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> __Marshaller_token_ChargeTransactionFeesOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.CheckThresholdInput> __Marshaller_token_CheckThresholdInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.CheckThresholdInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.TotalResourceTokensMaps> __Marshaller_token_TotalResourceTokensMaps = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.TotalResourceTokensMaps.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.ChargeResourceTokenInput> __Marshaller_token_ChargeResourceTokenInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.ChargeResourceTokenInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee> __Marshaller_token_SymbolListToPayTxSizeFee = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.UpdateCoefficientsInput> __Marshaller_token_UpdateCoefficientsInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.UpdateCoefficientsInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Address> __Marshaller_aelf_Address = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Address.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput> __Marshaller_token_SetTransactionFeeDelegationsInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput> __Marshaller_token_SetTransactionFeeDelegationsOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput> __Marshaller_token_RemoveTransactionFeeDelegatorInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput> __Marshaller_token_RemoveTransactionFeeDelegateeInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.SetSymbolAliasInput> __Marshaller_token_SetSymbolAliasInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.SetSymbolAliasInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput> __Marshaller_token_GetTransactionFeeDelegateesInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput> __Marshaller_token_GetTransactionFeeDelegateesOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetTokenInfoInput> __Marshaller_token_GetTokenInfoInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetTokenInfoInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.TokenInfo> __Marshaller_token_TokenInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.TokenInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.TokenInfoList> __Marshaller_token_TokenInfoList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.TokenInfoList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetBalanceInput> __Marshaller_token_GetBalanceInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetBalanceInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetBalanceOutput> __Marshaller_token_GetBalanceOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetBalanceOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetAllowanceInput> __Marshaller_token_GetAllowanceInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetAllowanceInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetAllowanceOutput> __Marshaller_token_GetAllowanceOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetAllowanceOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.IsInWhiteListInput> __Marshaller_token_IsInWhiteListInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.IsInWhiteListInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.BoolValue> __Marshaller_google_protobuf_BoolValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.BoolValue.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetLockedAmountInput> __Marshaller_token_GetLockedAmountInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetLockedAmountInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetLockedAmountOutput> __Marshaller_token_GetLockedAmountOutput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetLockedAmountOutput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput> __Marshaller_token_GetCrossChainTransferTokenContractAddressInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.StringValue> __Marshaller_google_protobuf_StringValue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.StringValue.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Int32Value> __Marshaller_google_protobuf_Int32Value = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Int32Value.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> __Marshaller_token_CalculateFeeCoefficients = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Hash> __Marshaller_aelf_Hash = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Hash.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.StringList> __Marshaller_token_StringList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.StringList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput> __Marshaller_token_GetTransactionFeeDelegationsOfADelegateeInput = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AElf.Contracts.MultiToken.TransactionFeeDelegations> __Marshaller_token_TransactionFeeDelegations = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AElf.Contracts.MultiToken.TransactionFeeDelegations.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.CreateInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Create = new grpc::Method<global::AElf.Contracts.MultiToken.CreateInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_token_CreateInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.IssueInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Issue = new grpc::Method<global::AElf.Contracts.MultiToken.IssueInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Issue",
        __Marshaller_token_IssueInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.TransferInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Transfer = new grpc::Method<global::AElf.Contracts.MultiToken.TransferInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Transfer",
        __Marshaller_token_TransferInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.TransferFromInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_TransferFrom = new grpc::Method<global::AElf.Contracts.MultiToken.TransferFromInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferFrom",
        __Marshaller_token_TransferFromInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.ApproveInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Approve = new grpc::Method<global::AElf.Contracts.MultiToken.ApproveInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Approve",
        __Marshaller_token_ApproveInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.BatchApproveInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_BatchApprove = new grpc::Method<global::AElf.Contracts.MultiToken.BatchApproveInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchApprove",
        __Marshaller_token_BatchApproveInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.UnApproveInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UnApprove = new grpc::Method<global::AElf.Contracts.MultiToken.UnApproveInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnApprove",
        __Marshaller_token_UnApproveInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.LockInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Lock = new grpc::Method<global::AElf.Contracts.MultiToken.LockInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Lock",
        __Marshaller_token_LockInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.UnlockInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Unlock = new grpc::Method<global::AElf.Contracts.MultiToken.UnlockInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unlock",
        __Marshaller_token_UnlockInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.BurnInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Burn = new grpc::Method<global::AElf.Contracts.MultiToken.BurnInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Burn",
        __Marshaller_token_BurnInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetPrimaryTokenSymbol = new grpc::Method<global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPrimaryTokenSymbol",
        __Marshaller_token_SetPrimaryTokenSymbolInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.CrossChainTransferInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CrossChainTransfer = new grpc::Method<global::AElf.Contracts.MultiToken.CrossChainTransferInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CrossChainTransfer",
        __Marshaller_token_CrossChainTransferInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CrossChainReceiveToken = new grpc::Method<global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CrossChainReceiveToken",
        __Marshaller_token_CrossChainReceiveTokenInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CrossChainCreateToken = new grpc::Method<global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CrossChainCreateToken",
        __Marshaller_token_CrossChainCreateTokenInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.InitializeFromParentChainInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_InitializeFromParentChain = new grpc::Method<global::AElf.Contracts.MultiToken.InitializeFromParentChainInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeFromParentChain",
        __Marshaller_token_InitializeFromParentChainInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.TotalTransactionFeesMap, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ClaimTransactionFees = new grpc::Method<global::AElf.Contracts.MultiToken.TotalTransactionFeesMap, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClaimTransactionFees",
        __Marshaller_token_TotalTransactionFeesMap,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput, global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> __Method_ChargeTransactionFees = new grpc::Method<global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput, global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChargeTransactionFees",
        __Marshaller_token_ChargeTransactionFeesInput,
        __Marshaller_token_ChargeTransactionFeesOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput, global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> __Method_ChargeUserContractTransactionFees = new grpc::Method<global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput, global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChargeUserContractTransactionFees",
        __Marshaller_token_ChargeTransactionFeesInput,
        __Marshaller_token_ChargeTransactionFeesOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.CheckThresholdInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CheckThreshold = new grpc::Method<global::AElf.Contracts.MultiToken.CheckThresholdInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckThreshold",
        __Marshaller_token_CheckThresholdInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty> __Method_InitialCoefficients = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitialCoefficients",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.TotalResourceTokensMaps, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DonateResourceToken = new grpc::Method<global::AElf.Contracts.MultiToken.TotalResourceTokensMaps, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DonateResourceToken",
        __Marshaller_token_TotalResourceTokensMaps,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.ChargeResourceTokenInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ChargeResourceToken = new grpc::Method<global::AElf.Contracts.MultiToken.ChargeResourceTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChargeResourceToken",
        __Marshaller_token_ChargeResourceTokenInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CheckResourceToken = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckResourceToken",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetSymbolsToPayTxSizeFee = new grpc::Method<global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSymbolsToPayTxSizeFee",
        __Marshaller_token_SymbolListToPayTxSizeFee,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.UpdateCoefficientsInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateCoefficientsForSender = new grpc::Method<global::AElf.Contracts.MultiToken.UpdateCoefficientsInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCoefficientsForSender",
        __Marshaller_token_UpdateCoefficientsInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.UpdateCoefficientsInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateCoefficientsForContract = new grpc::Method<global::AElf.Contracts.MultiToken.UpdateCoefficientsInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCoefficientsForContract",
        __Marshaller_token_UpdateCoefficientsInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty> __Method_InitializeAuthorizedController = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeAuthorizedController",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Address, global::Google.Protobuf.WellKnownTypes.Empty> __Method_AddAddressToCreateTokenWhiteList = new grpc::Method<global::AElf.Address, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAddressToCreateTokenWhiteList",
        __Marshaller_aelf_Address,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Address, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RemoveAddressFromCreateTokenWhiteList = new grpc::Method<global::AElf.Address, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveAddressFromCreateTokenWhiteList",
        __Marshaller_aelf_Address,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput, global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput> __Method_SetTransactionFeeDelegations = new grpc::Method<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput, global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTransactionFeeDelegations",
        __Marshaller_token_SetTransactionFeeDelegationsInput,
        __Marshaller_token_SetTransactionFeeDelegationsOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RemoveTransactionFeeDelegator = new grpc::Method<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveTransactionFeeDelegator",
        __Marshaller_token_RemoveTransactionFeeDelegatorInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_RemoveTransactionFeeDelegatee = new grpc::Method<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveTransactionFeeDelegatee",
        __Marshaller_token_RemoveTransactionFeeDelegateeInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.SetSymbolAliasInput, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetSymbolAlias = new grpc::Method<global::AElf.Contracts.MultiToken.SetSymbolAliasInput, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSymbolAlias",
        __Marshaller_token_SetSymbolAliasInput,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput, global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput> __Method_GetTransactionFeeDelegatees = new grpc::Method<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput, global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionFeeDelegatees",
        __Marshaller_token_GetTransactionFeeDelegateesInput,
        __Marshaller_token_GetTransactionFeeDelegateesOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetTokenInfoInput, global::AElf.Contracts.MultiToken.TokenInfo> __Method_GetTokenInfo = new grpc::Method<global::AElf.Contracts.MultiToken.GetTokenInfoInput, global::AElf.Contracts.MultiToken.TokenInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTokenInfo",
        __Marshaller_token_GetTokenInfoInput,
        __Marshaller_token_TokenInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.TokenInfo> __Method_GetNativeTokenInfo = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.TokenInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNativeTokenInfo",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_token_TokenInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.TokenInfoList> __Method_GetResourceTokenInfo = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.TokenInfoList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetResourceTokenInfo",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_token_TokenInfoList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetBalanceInput, global::AElf.Contracts.MultiToken.GetBalanceOutput> __Method_GetBalance = new grpc::Method<global::AElf.Contracts.MultiToken.GetBalanceInput, global::AElf.Contracts.MultiToken.GetBalanceOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalance",
        __Marshaller_token_GetBalanceInput,
        __Marshaller_token_GetBalanceOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetAllowanceInput, global::AElf.Contracts.MultiToken.GetAllowanceOutput> __Method_GetAllowance = new grpc::Method<global::AElf.Contracts.MultiToken.GetAllowanceInput, global::AElf.Contracts.MultiToken.GetAllowanceOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllowance",
        __Marshaller_token_GetAllowanceInput,
        __Marshaller_token_GetAllowanceOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetAllowanceInput, global::AElf.Contracts.MultiToken.GetAllowanceOutput> __Method_GetAvailableAllowance = new grpc::Method<global::AElf.Contracts.MultiToken.GetAllowanceInput, global::AElf.Contracts.MultiToken.GetAllowanceOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAvailableAllowance",
        __Marshaller_token_GetAllowanceInput,
        __Marshaller_token_GetAllowanceOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.IsInWhiteListInput, global::Google.Protobuf.WellKnownTypes.BoolValue> __Method_IsInWhiteList = new grpc::Method<global::AElf.Contracts.MultiToken.IsInWhiteListInput, global::Google.Protobuf.WellKnownTypes.BoolValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsInWhiteList",
        __Marshaller_token_IsInWhiteListInput,
        __Marshaller_google_protobuf_BoolValue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetLockedAmountInput, global::AElf.Contracts.MultiToken.GetLockedAmountOutput> __Method_GetLockedAmount = new grpc::Method<global::AElf.Contracts.MultiToken.GetLockedAmountInput, global::AElf.Contracts.MultiToken.GetLockedAmountOutput>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLockedAmount",
        __Marshaller_token_GetLockedAmountInput,
        __Marshaller_token_GetLockedAmountOutput);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput, global::AElf.Address> __Method_GetCrossChainTransferTokenContractAddress = new grpc::Method<global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput, global::AElf.Address>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCrossChainTransferTokenContractAddress",
        __Marshaller_token_GetCrossChainTransferTokenContractAddressInput,
        __Marshaller_aelf_Address);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.StringValue> __Method_GetPrimaryTokenSymbol = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.StringValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPrimaryTokenSymbol",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_google_protobuf_StringValue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Int32Value, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> __Method_GetCalculateFeeCoefficientsForContract = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Int32Value, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCalculateFeeCoefficientsForContract",
        __Marshaller_google_protobuf_Int32Value,
        __Marshaller_token_CalculateFeeCoefficients);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> __Method_GetCalculateFeeCoefficientsForSender = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCalculateFeeCoefficientsForSender",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_token_CalculateFeeCoefficients);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee> __Method_GetSymbolsToPayTxSizeFee = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSymbolsToPayTxSizeFee",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_token_SymbolListToPayTxSizeFee);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Hash> __Method_GetLatestTotalTransactionFeesMapHash = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Hash>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLatestTotalTransactionFeesMapHash",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_aelf_Hash);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Hash> __Method_GetLatestTotalResourceTokensMapsHash = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Hash>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLatestTotalResourceTokensMapsHash",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_aelf_Hash);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.BoolValue> __Method_IsTokenAvailableForMethodFee = new grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.BoolValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsTokenAvailableForMethodFee",
        __Marshaller_google_protobuf_StringValue,
        __Marshaller_google_protobuf_BoolValue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.StringList> __Method_GetReservedExternalInfoKeyList = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.StringList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReservedExternalInfoKeyList",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_token_StringList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput, global::AElf.Contracts.MultiToken.TransactionFeeDelegations> __Method_GetTransactionFeeDelegationsOfADelegatee = new grpc::Method<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput, global::AElf.Contracts.MultiToken.TransactionFeeDelegations>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactionFeeDelegationsOfADelegatee",
        __Marshaller_token_GetTransactionFeeDelegationsOfADelegateeInput,
        __Marshaller_token_TransactionFeeDelegations);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.StringValue> __Method_GetTokenAlias = new grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.StringValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTokenAlias",
        __Marshaller_google_protobuf_StringValue,
        __Marshaller_google_protobuf_StringValue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.StringValue> __Method_GetSymbolByAlias = new grpc::Method<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.StringValue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSymbolByAlias",
        __Marshaller_google_protobuf_StringValue,
        __Marshaller_google_protobuf_StringValue);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TokenContract</summary>
    [grpc::BindServiceMethod(typeof(TokenContract), "BindService")]
    public abstract partial class TokenContractBase
    {
      /// <summary>
      /// Create a new token.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Create(global::AElf.Contracts.MultiToken.CreateInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Issuing some amount of tokens to an address is the action of increasing that addresses balance 
      /// for the given token. The total amount of issued tokens must not exceed the total supply of the token 
      /// and only the issuer (creator) of the token can issue tokens. 
      /// Issuing tokens effectively increases the circulating supply.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Issue(global::AElf.Contracts.MultiToken.IssueInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Transferring tokens simply is the action of transferring a given amount of tokens from one address to another. 
      /// The origin or source address is the signer of the transaction. 
      /// The balance of the sender must be higher than the amount that is transferred.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Transfer(global::AElf.Contracts.MultiToken.TransferInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// The TransferFrom action will transfer a specified amount of tokens from one address to another. 
      /// For this operation to succeed the from address needs to have approved (see allowances) enough tokens 
      /// to Sender of this transaction. If successful the amount will be removed from the allowance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> TransferFrom(global::AElf.Contracts.MultiToken.TransferFromInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// The approve action increases the allowance from the Sender to the Spender address, 
      /// enabling the Spender to call TransferFrom.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Approve(global::AElf.Contracts.MultiToken.ApproveInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> BatchApprove(global::AElf.Contracts.MultiToken.BatchApproveInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is the reverse operation for Approve, it will decrease the allowance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UnApprove(global::AElf.Contracts.MultiToken.UnApproveInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method can be used to lock tokens.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Lock(global::AElf.Contracts.MultiToken.LockInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This is the reverse operation of locking, it un-locks some previously locked tokens.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Unlock(global::AElf.Contracts.MultiToken.UnlockInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This action will burn the specified amount of tokens, removing them from the token's Supply.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Burn(global::AElf.Contracts.MultiToken.BurnInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set the primary token of side chain.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetPrimaryTokenSymbol(global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This interface is used for cross-chain transfer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainTransfer(global::AElf.Contracts.MultiToken.CrossChainTransferInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method is used to receive cross-chain transfers.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainReceiveToken(global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// The side chain creates tokens.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainCreateToken(global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// When the side chain is started, the side chain is initialized with the parent chain information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> InitializeFromParentChain(global::AElf.Contracts.MultiToken.InitializeFromParentChainInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Handle the transaction fees charged by ChargeTransactionFees.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ClaimTransactionFees(global::AElf.Contracts.MultiToken.TotalTransactionFeesMap request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Used to collect transaction fees.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> ChargeTransactionFees(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> ChargeUserContractTransactionFees(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check the token threshold.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CheckThreshold(global::AElf.Contracts.MultiToken.CheckThresholdInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Initialize coefficients of every type of tokens supporting charging fee.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> InitialCoefficients(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Processing resource token received.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DonateResourceToken(global::AElf.Contracts.MultiToken.TotalResourceTokensMaps request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// A transaction resource fee is charged to implement the ACS8 standards.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ChargeResourceToken(global::AElf.Contracts.MultiToken.ChargeResourceTokenInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Verify that the resource token are sufficient.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CheckResourceToken(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set the list of tokens to pay transaction fees.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetSymbolsToPayTxSizeFee(global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateCoefficientsForSender(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateCoefficientsForContract(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// This method is used to initialize the governance organization for some functions, 
      /// including: the coefficient of the user transaction fee calculation formula, 
      /// the coefficient of the contract developer resource fee calculation formula, and the side chain rental fee.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> InitializeAuthorizedController(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> AddAddressToCreateTokenWhiteList(global::AElf.Address request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> RemoveAddressFromCreateTokenWhiteList(global::AElf.Address request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput> SetTransactionFeeDelegations(global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> RemoveTransactionFeeDelegator(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> RemoveTransactionFeeDelegatee(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetSymbolAlias(global::AElf.Contracts.MultiToken.SetSymbolAliasInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get all delegatees' address of delegator from input
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput> GetTransactionFeeDelegatees(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query token information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.TokenInfo> GetTokenInfo(global::AElf.Contracts.MultiToken.GetTokenInfoInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query native token information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.TokenInfo> GetNativeTokenInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query resource token information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.TokenInfoList> GetResourceTokenInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the balance at the specified address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.GetBalanceOutput> GetBalance(global::AElf.Contracts.MultiToken.GetBalanceInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the account's allowance for other addresses
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.GetAllowanceOutput> GetAllowance(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the account's available allowance for other addresses
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.GetAllowanceOutput> GetAvailableAllowance(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Check whether the token is in the whitelist of an address, 
      /// which can be called TransferFrom to transfer the token under the condition of not being credited.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.BoolValue> IsInWhiteList(global::AElf.Contracts.MultiToken.IsInWhiteListInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the information for a lock.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.GetLockedAmountOutput> GetLockedAmount(global::AElf.Contracts.MultiToken.GetLockedAmountInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the address of receiving token in cross-chain transfer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Address> GetCrossChainTransferTokenContractAddress(global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the name of the primary Token.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.StringValue> GetPrimaryTokenSymbol(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> GetCalculateFeeCoefficientsForContract(global::Google.Protobuf.WellKnownTypes.Int32Value request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> GetCalculateFeeCoefficientsForSender(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query tokens that can pay transaction fees.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee> GetSymbolsToPayTxSizeFee(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the hash of the last input of ClaimTransactionFees.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Hash> GetLatestTotalTransactionFeesMapHash(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Query the hash of the last input of DonateResourceToken.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Hash> GetLatestTotalResourceTokensMapsHash(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.BoolValue> IsTokenAvailableForMethodFee(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.StringList> GetReservedExternalInfoKeyList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AElf.Contracts.MultiToken.TransactionFeeDelegations> GetTransactionFeeDelegationsOfADelegatee(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.StringValue> GetTokenAlias(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.StringValue> GetSymbolByAlias(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TokenContract</summary>
    public partial class TokenContractClient : grpc::ClientBase<TokenContractClient>
    {
      /// <summary>Creates a new client for TokenContract</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TokenContractClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TokenContract that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TokenContractClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TokenContractClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TokenContractClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Create(global::AElf.Contracts.MultiToken.CreateInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Create(global::AElf.Contracts.MultiToken.CreateInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      /// Create a new token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateAsync(global::AElf.Contracts.MultiToken.CreateInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateAsync(global::AElf.Contracts.MultiToken.CreateInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      /// Issuing some amount of tokens to an address is the action of increasing that addresses balance 
      /// for the given token. The total amount of issued tokens must not exceed the total supply of the token 
      /// and only the issuer (creator) of the token can issue tokens. 
      /// Issuing tokens effectively increases the circulating supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Issue(global::AElf.Contracts.MultiToken.IssueInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Issue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Issuing some amount of tokens to an address is the action of increasing that addresses balance 
      /// for the given token. The total amount of issued tokens must not exceed the total supply of the token 
      /// and only the issuer (creator) of the token can issue tokens. 
      /// Issuing tokens effectively increases the circulating supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Issue(global::AElf.Contracts.MultiToken.IssueInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Issue, null, options, request);
      }
      /// <summary>
      /// Issuing some amount of tokens to an address is the action of increasing that addresses balance 
      /// for the given token. The total amount of issued tokens must not exceed the total supply of the token 
      /// and only the issuer (creator) of the token can issue tokens. 
      /// Issuing tokens effectively increases the circulating supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> IssueAsync(global::AElf.Contracts.MultiToken.IssueInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IssueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Issuing some amount of tokens to an address is the action of increasing that addresses balance 
      /// for the given token. The total amount of issued tokens must not exceed the total supply of the token 
      /// and only the issuer (creator) of the token can issue tokens. 
      /// Issuing tokens effectively increases the circulating supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> IssueAsync(global::AElf.Contracts.MultiToken.IssueInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Issue, null, options, request);
      }
      /// <summary>
      /// Transferring tokens simply is the action of transferring a given amount of tokens from one address to another. 
      /// The origin or source address is the signer of the transaction. 
      /// The balance of the sender must be higher than the amount that is transferred.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Transfer(global::AElf.Contracts.MultiToken.TransferInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Transfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transferring tokens simply is the action of transferring a given amount of tokens from one address to another. 
      /// The origin or source address is the signer of the transaction. 
      /// The balance of the sender must be higher than the amount that is transferred.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Transfer(global::AElf.Contracts.MultiToken.TransferInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Transfer, null, options, request);
      }
      /// <summary>
      /// Transferring tokens simply is the action of transferring a given amount of tokens from one address to another. 
      /// The origin or source address is the signer of the transaction. 
      /// The balance of the sender must be higher than the amount that is transferred.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> TransferAsync(global::AElf.Contracts.MultiToken.TransferInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transferring tokens simply is the action of transferring a given amount of tokens from one address to another. 
      /// The origin or source address is the signer of the transaction. 
      /// The balance of the sender must be higher than the amount that is transferred.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> TransferAsync(global::AElf.Contracts.MultiToken.TransferInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Transfer, null, options, request);
      }
      /// <summary>
      /// The TransferFrom action will transfer a specified amount of tokens from one address to another. 
      /// For this operation to succeed the from address needs to have approved (see allowances) enough tokens 
      /// to Sender of this transaction. If successful the amount will be removed from the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty TransferFrom(global::AElf.Contracts.MultiToken.TransferFromInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferFrom(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The TransferFrom action will transfer a specified amount of tokens from one address to another. 
      /// For this operation to succeed the from address needs to have approved (see allowances) enough tokens 
      /// to Sender of this transaction. If successful the amount will be removed from the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty TransferFrom(global::AElf.Contracts.MultiToken.TransferFromInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferFrom, null, options, request);
      }
      /// <summary>
      /// The TransferFrom action will transfer a specified amount of tokens from one address to another. 
      /// For this operation to succeed the from address needs to have approved (see allowances) enough tokens 
      /// to Sender of this transaction. If successful the amount will be removed from the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> TransferFromAsync(global::AElf.Contracts.MultiToken.TransferFromInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferFromAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The TransferFrom action will transfer a specified amount of tokens from one address to another. 
      /// For this operation to succeed the from address needs to have approved (see allowances) enough tokens 
      /// to Sender of this transaction. If successful the amount will be removed from the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> TransferFromAsync(global::AElf.Contracts.MultiToken.TransferFromInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferFrom, null, options, request);
      }
      /// <summary>
      /// The approve action increases the allowance from the Sender to the Spender address, 
      /// enabling the Spender to call TransferFrom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Approve(global::AElf.Contracts.MultiToken.ApproveInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Approve(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The approve action increases the allowance from the Sender to the Spender address, 
      /// enabling the Spender to call TransferFrom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Approve(global::AElf.Contracts.MultiToken.ApproveInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Approve, null, options, request);
      }
      /// <summary>
      /// The approve action increases the allowance from the Sender to the Spender address, 
      /// enabling the Spender to call TransferFrom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ApproveAsync(global::AElf.Contracts.MultiToken.ApproveInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApproveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The approve action increases the allowance from the Sender to the Spender address, 
      /// enabling the Spender to call TransferFrom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ApproveAsync(global::AElf.Contracts.MultiToken.ApproveInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Approve, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty BatchApprove(global::AElf.Contracts.MultiToken.BatchApproveInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchApprove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty BatchApprove(global::AElf.Contracts.MultiToken.BatchApproveInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchApprove, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BatchApproveAsync(global::AElf.Contracts.MultiToken.BatchApproveInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchApproveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BatchApproveAsync(global::AElf.Contracts.MultiToken.BatchApproveInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchApprove, null, options, request);
      }
      /// <summary>
      /// This is the reverse operation for Approve, it will decrease the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UnApprove(global::AElf.Contracts.MultiToken.UnApproveInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnApprove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is the reverse operation for Approve, it will decrease the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UnApprove(global::AElf.Contracts.MultiToken.UnApproveInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnApprove, null, options, request);
      }
      /// <summary>
      /// This is the reverse operation for Approve, it will decrease the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UnApproveAsync(global::AElf.Contracts.MultiToken.UnApproveInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnApproveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is the reverse operation for Approve, it will decrease the allowance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UnApproveAsync(global::AElf.Contracts.MultiToken.UnApproveInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnApprove, null, options, request);
      }
      /// <summary>
      /// This method can be used to lock tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Lock(global::AElf.Contracts.MultiToken.LockInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Lock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method can be used to lock tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Lock(global::AElf.Contracts.MultiToken.LockInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// This method can be used to lock tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LockAsync(global::AElf.Contracts.MultiToken.LockInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method can be used to lock tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LockAsync(global::AElf.Contracts.MultiToken.LockInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Lock, null, options, request);
      }
      /// <summary>
      /// This is the reverse operation of locking, it un-locks some previously locked tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Unlock(global::AElf.Contracts.MultiToken.UnlockInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is the reverse operation of locking, it un-locks some previously locked tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Unlock(global::AElf.Contracts.MultiToken.UnlockInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unlock, null, options, request);
      }
      /// <summary>
      /// This is the reverse operation of locking, it un-locks some previously locked tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UnlockAsync(global::AElf.Contracts.MultiToken.UnlockInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This is the reverse operation of locking, it un-locks some previously locked tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UnlockAsync(global::AElf.Contracts.MultiToken.UnlockInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unlock, null, options, request);
      }
      /// <summary>
      /// This action will burn the specified amount of tokens, removing them from the token's Supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Burn(global::AElf.Contracts.MultiToken.BurnInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Burn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This action will burn the specified amount of tokens, removing them from the token's Supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Burn(global::AElf.Contracts.MultiToken.BurnInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Burn, null, options, request);
      }
      /// <summary>
      /// This action will burn the specified amount of tokens, removing them from the token's Supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BurnAsync(global::AElf.Contracts.MultiToken.BurnInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BurnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This action will burn the specified amount of tokens, removing them from the token's Supply.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BurnAsync(global::AElf.Contracts.MultiToken.BurnInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Burn, null, options, request);
      }
      /// <summary>
      /// Set the primary token of side chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetPrimaryTokenSymbol(global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPrimaryTokenSymbol(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the primary token of side chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetPrimaryTokenSymbol(global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPrimaryTokenSymbol, null, options, request);
      }
      /// <summary>
      /// Set the primary token of side chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetPrimaryTokenSymbolAsync(global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPrimaryTokenSymbolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the primary token of side chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetPrimaryTokenSymbolAsync(global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPrimaryTokenSymbol, null, options, request);
      }
      /// <summary>
      /// This interface is used for cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CrossChainTransfer(global::AElf.Contracts.MultiToken.CrossChainTransferInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrossChainTransfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This interface is used for cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CrossChainTransfer(global::AElf.Contracts.MultiToken.CrossChainTransferInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CrossChainTransfer, null, options, request);
      }
      /// <summary>
      /// This interface is used for cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainTransferAsync(global::AElf.Contracts.MultiToken.CrossChainTransferInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrossChainTransferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This interface is used for cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainTransferAsync(global::AElf.Contracts.MultiToken.CrossChainTransferInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CrossChainTransfer, null, options, request);
      }
      /// <summary>
      /// This method is used to receive cross-chain transfers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CrossChainReceiveToken(global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrossChainReceiveToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method is used to receive cross-chain transfers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CrossChainReceiveToken(global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CrossChainReceiveToken, null, options, request);
      }
      /// <summary>
      /// This method is used to receive cross-chain transfers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainReceiveTokenAsync(global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrossChainReceiveTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method is used to receive cross-chain transfers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainReceiveTokenAsync(global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CrossChainReceiveToken, null, options, request);
      }
      /// <summary>
      /// The side chain creates tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CrossChainCreateToken(global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrossChainCreateToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The side chain creates tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CrossChainCreateToken(global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CrossChainCreateToken, null, options, request);
      }
      /// <summary>
      /// The side chain creates tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainCreateTokenAsync(global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrossChainCreateTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// The side chain creates tokens.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CrossChainCreateTokenAsync(global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CrossChainCreateToken, null, options, request);
      }
      /// <summary>
      /// When the side chain is started, the side chain is initialized with the parent chain information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty InitializeFromParentChain(global::AElf.Contracts.MultiToken.InitializeFromParentChainInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeFromParentChain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// When the side chain is started, the side chain is initialized with the parent chain information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty InitializeFromParentChain(global::AElf.Contracts.MultiToken.InitializeFromParentChainInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeFromParentChain, null, options, request);
      }
      /// <summary>
      /// When the side chain is started, the side chain is initialized with the parent chain information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> InitializeFromParentChainAsync(global::AElf.Contracts.MultiToken.InitializeFromParentChainInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeFromParentChainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// When the side chain is started, the side chain is initialized with the parent chain information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> InitializeFromParentChainAsync(global::AElf.Contracts.MultiToken.InitializeFromParentChainInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeFromParentChain, null, options, request);
      }
      /// <summary>
      /// Handle the transaction fees charged by ChargeTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ClaimTransactionFees(global::AElf.Contracts.MultiToken.TotalTransactionFeesMap request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClaimTransactionFees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Handle the transaction fees charged by ChargeTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ClaimTransactionFees(global::AElf.Contracts.MultiToken.TotalTransactionFeesMap request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClaimTransactionFees, null, options, request);
      }
      /// <summary>
      /// Handle the transaction fees charged by ChargeTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ClaimTransactionFeesAsync(global::AElf.Contracts.MultiToken.TotalTransactionFeesMap request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClaimTransactionFeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Handle the transaction fees charged by ChargeTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ClaimTransactionFeesAsync(global::AElf.Contracts.MultiToken.TotalTransactionFeesMap request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClaimTransactionFees, null, options, request);
      }
      /// <summary>
      /// Used to collect transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput ChargeTransactionFees(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeTransactionFees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to collect transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput ChargeTransactionFees(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChargeTransactionFees, null, options, request);
      }
      /// <summary>
      /// Used to collect transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> ChargeTransactionFeesAsync(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeTransactionFeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Used to collect transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> ChargeTransactionFeesAsync(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChargeTransactionFees, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput ChargeUserContractTransactionFees(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeUserContractTransactionFees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput ChargeUserContractTransactionFees(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChargeUserContractTransactionFees, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> ChargeUserContractTransactionFeesAsync(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeUserContractTransactionFeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput> ChargeUserContractTransactionFeesAsync(global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChargeUserContractTransactionFees, null, options, request);
      }
      /// <summary>
      /// Check the token threshold.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CheckThreshold(global::AElf.Contracts.MultiToken.CheckThresholdInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckThreshold(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check the token threshold.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CheckThreshold(global::AElf.Contracts.MultiToken.CheckThresholdInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckThreshold, null, options, request);
      }
      /// <summary>
      /// Check the token threshold.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CheckThresholdAsync(global::AElf.Contracts.MultiToken.CheckThresholdInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckThresholdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check the token threshold.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CheckThresholdAsync(global::AElf.Contracts.MultiToken.CheckThresholdInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckThreshold, null, options, request);
      }
      /// <summary>
      /// Initialize coefficients of every type of tokens supporting charging fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty InitialCoefficients(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitialCoefficients(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize coefficients of every type of tokens supporting charging fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty InitialCoefficients(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitialCoefficients, null, options, request);
      }
      /// <summary>
      /// Initialize coefficients of every type of tokens supporting charging fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> InitialCoefficientsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitialCoefficientsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initialize coefficients of every type of tokens supporting charging fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> InitialCoefficientsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitialCoefficients, null, options, request);
      }
      /// <summary>
      /// Processing resource token received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DonateResourceToken(global::AElf.Contracts.MultiToken.TotalResourceTokensMaps request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DonateResourceToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Processing resource token received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DonateResourceToken(global::AElf.Contracts.MultiToken.TotalResourceTokensMaps request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DonateResourceToken, null, options, request);
      }
      /// <summary>
      /// Processing resource token received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DonateResourceTokenAsync(global::AElf.Contracts.MultiToken.TotalResourceTokensMaps request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DonateResourceTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Processing resource token received.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DonateResourceTokenAsync(global::AElf.Contracts.MultiToken.TotalResourceTokensMaps request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DonateResourceToken, null, options, request);
      }
      /// <summary>
      /// A transaction resource fee is charged to implement the ACS8 standards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ChargeResourceToken(global::AElf.Contracts.MultiToken.ChargeResourceTokenInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeResourceToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A transaction resource fee is charged to implement the ACS8 standards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ChargeResourceToken(global::AElf.Contracts.MultiToken.ChargeResourceTokenInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChargeResourceToken, null, options, request);
      }
      /// <summary>
      /// A transaction resource fee is charged to implement the ACS8 standards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ChargeResourceTokenAsync(global::AElf.Contracts.MultiToken.ChargeResourceTokenInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChargeResourceTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// A transaction resource fee is charged to implement the ACS8 standards.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ChargeResourceTokenAsync(global::AElf.Contracts.MultiToken.ChargeResourceTokenInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChargeResourceToken, null, options, request);
      }
      /// <summary>
      /// Verify that the resource token are sufficient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CheckResourceToken(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckResourceToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify that the resource token are sufficient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CheckResourceToken(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckResourceToken, null, options, request);
      }
      /// <summary>
      /// Verify that the resource token are sufficient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CheckResourceTokenAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckResourceTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify that the resource token are sufficient.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CheckResourceTokenAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckResourceToken, null, options, request);
      }
      /// <summary>
      /// Set the list of tokens to pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetSymbolsToPayTxSizeFee(global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSymbolsToPayTxSizeFee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the list of tokens to pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetSymbolsToPayTxSizeFee(global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSymbolsToPayTxSizeFee, null, options, request);
      }
      /// <summary>
      /// Set the list of tokens to pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetSymbolsToPayTxSizeFeeAsync(global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSymbolsToPayTxSizeFeeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the list of tokens to pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetSymbolsToPayTxSizeFeeAsync(global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSymbolsToPayTxSizeFee, null, options, request);
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateCoefficientsForSender(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCoefficientsForSender(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateCoefficientsForSender(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCoefficientsForSender, null, options, request);
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateCoefficientsForSenderAsync(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCoefficientsForSenderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateCoefficientsForSenderAsync(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCoefficientsForSender, null, options, request);
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateCoefficientsForContract(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCoefficientsForContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateCoefficientsForContract(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCoefficientsForContract, null, options, request);
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateCoefficientsForContractAsync(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCoefficientsForContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateCoefficientsForContractAsync(global::AElf.Contracts.MultiToken.UpdateCoefficientsInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCoefficientsForContract, null, options, request);
      }
      /// <summary>
      /// This method is used to initialize the governance organization for some functions, 
      /// including: the coefficient of the user transaction fee calculation formula, 
      /// the coefficient of the contract developer resource fee calculation formula, and the side chain rental fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty InitializeAuthorizedController(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeAuthorizedController(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method is used to initialize the governance organization for some functions, 
      /// including: the coefficient of the user transaction fee calculation formula, 
      /// the coefficient of the contract developer resource fee calculation formula, and the side chain rental fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty InitializeAuthorizedController(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeAuthorizedController, null, options, request);
      }
      /// <summary>
      /// This method is used to initialize the governance organization for some functions, 
      /// including: the coefficient of the user transaction fee calculation formula, 
      /// the coefficient of the contract developer resource fee calculation formula, and the side chain rental fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> InitializeAuthorizedControllerAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeAuthorizedControllerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// This method is used to initialize the governance organization for some functions, 
      /// including: the coefficient of the user transaction fee calculation formula, 
      /// the coefficient of the contract developer resource fee calculation formula, and the side chain rental fee.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> InitializeAuthorizedControllerAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeAuthorizedController, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty AddAddressToCreateTokenWhiteList(global::AElf.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAddressToCreateTokenWhiteList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty AddAddressToCreateTokenWhiteList(global::AElf.Address request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAddressToCreateTokenWhiteList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AddAddressToCreateTokenWhiteListAsync(global::AElf.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAddressToCreateTokenWhiteListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> AddAddressToCreateTokenWhiteListAsync(global::AElf.Address request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAddressToCreateTokenWhiteList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveAddressFromCreateTokenWhiteList(global::AElf.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAddressFromCreateTokenWhiteList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveAddressFromCreateTokenWhiteList(global::AElf.Address request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveAddressFromCreateTokenWhiteList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveAddressFromCreateTokenWhiteListAsync(global::AElf.Address request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAddressFromCreateTokenWhiteListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveAddressFromCreateTokenWhiteListAsync(global::AElf.Address request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveAddressFromCreateTokenWhiteList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput SetTransactionFeeDelegations(global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTransactionFeeDelegations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput SetTransactionFeeDelegations(global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTransactionFeeDelegations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput> SetTransactionFeeDelegationsAsync(global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetTransactionFeeDelegationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput> SetTransactionFeeDelegationsAsync(global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTransactionFeeDelegations, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveTransactionFeeDelegator(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveTransactionFeeDelegator(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveTransactionFeeDelegator(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveTransactionFeeDelegator, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveTransactionFeeDelegatorAsync(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveTransactionFeeDelegatorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveTransactionFeeDelegatorAsync(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveTransactionFeeDelegator, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveTransactionFeeDelegatee(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveTransactionFeeDelegatee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty RemoveTransactionFeeDelegatee(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveTransactionFeeDelegatee, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveTransactionFeeDelegateeAsync(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveTransactionFeeDelegateeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RemoveTransactionFeeDelegateeAsync(global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveTransactionFeeDelegatee, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetSymbolAlias(global::AElf.Contracts.MultiToken.SetSymbolAliasInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSymbolAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetSymbolAlias(global::AElf.Contracts.MultiToken.SetSymbolAliasInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSymbolAlias, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetSymbolAliasAsync(global::AElf.Contracts.MultiToken.SetSymbolAliasInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSymbolAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetSymbolAliasAsync(global::AElf.Contracts.MultiToken.SetSymbolAliasInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSymbolAlias, null, options, request);
      }
      /// <summary>
      /// Get all delegatees' address of delegator from input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput GetTransactionFeeDelegatees(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionFeeDelegatees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all delegatees' address of delegator from input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput GetTransactionFeeDelegatees(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionFeeDelegatees, null, options, request);
      }
      /// <summary>
      /// Get all delegatees' address of delegator from input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput> GetTransactionFeeDelegateesAsync(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionFeeDelegateesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get all delegatees' address of delegator from input
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput> GetTransactionFeeDelegateesAsync(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionFeeDelegatees, null, options, request);
      }
      /// <summary>
      /// Query token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TokenInfo GetTokenInfo(global::AElf.Contracts.MultiToken.GetTokenInfoInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TokenInfo GetTokenInfo(global::AElf.Contracts.MultiToken.GetTokenInfoInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTokenInfo, null, options, request);
      }
      /// <summary>
      /// Query token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TokenInfo> GetTokenInfoAsync(global::AElf.Contracts.MultiToken.GetTokenInfoInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TokenInfo> GetTokenInfoAsync(global::AElf.Contracts.MultiToken.GetTokenInfoInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTokenInfo, null, options, request);
      }
      /// <summary>
      /// Query native token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TokenInfo GetNativeTokenInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNativeTokenInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query native token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TokenInfo GetNativeTokenInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNativeTokenInfo, null, options, request);
      }
      /// <summary>
      /// Query native token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TokenInfo> GetNativeTokenInfoAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNativeTokenInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query native token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TokenInfo> GetNativeTokenInfoAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNativeTokenInfo, null, options, request);
      }
      /// <summary>
      /// Query resource token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TokenInfoList GetResourceTokenInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResourceTokenInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query resource token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TokenInfoList GetResourceTokenInfo(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetResourceTokenInfo, null, options, request);
      }
      /// <summary>
      /// Query resource token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TokenInfoList> GetResourceTokenInfoAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetResourceTokenInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query resource token information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TokenInfoList> GetResourceTokenInfoAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetResourceTokenInfo, null, options, request);
      }
      /// <summary>
      /// Query the balance at the specified address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetBalanceOutput GetBalance(global::AElf.Contracts.MultiToken.GetBalanceInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the balance at the specified address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetBalanceOutput GetBalance(global::AElf.Contracts.MultiToken.GetBalanceInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBalance, null, options, request);
      }
      /// <summary>
      /// Query the balance at the specified address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetBalanceOutput> GetBalanceAsync(global::AElf.Contracts.MultiToken.GetBalanceInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the balance at the specified address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetBalanceOutput> GetBalanceAsync(global::AElf.Contracts.MultiToken.GetBalanceInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBalance, null, options, request);
      }
      /// <summary>
      /// Query the account's allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetAllowanceOutput GetAllowance(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllowance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the account's allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetAllowanceOutput GetAllowance(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllowance, null, options, request);
      }
      /// <summary>
      /// Query the account's allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetAllowanceOutput> GetAllowanceAsync(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllowanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the account's allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetAllowanceOutput> GetAllowanceAsync(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllowance, null, options, request);
      }
      /// <summary>
      /// Query the account's available allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetAllowanceOutput GetAvailableAllowance(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableAllowance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the account's available allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetAllowanceOutput GetAvailableAllowance(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAvailableAllowance, null, options, request);
      }
      /// <summary>
      /// Query the account's available allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetAllowanceOutput> GetAvailableAllowanceAsync(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableAllowanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the account's available allowance for other addresses
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetAllowanceOutput> GetAvailableAllowanceAsync(global::AElf.Contracts.MultiToken.GetAllowanceInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAvailableAllowance, null, options, request);
      }
      /// <summary>
      /// Check whether the token is in the whitelist of an address, 
      /// which can be called TransferFrom to transfer the token under the condition of not being credited.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.BoolValue IsInWhiteList(global::AElf.Contracts.MultiToken.IsInWhiteListInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsInWhiteList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check whether the token is in the whitelist of an address, 
      /// which can be called TransferFrom to transfer the token under the condition of not being credited.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.BoolValue IsInWhiteList(global::AElf.Contracts.MultiToken.IsInWhiteListInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsInWhiteList, null, options, request);
      }
      /// <summary>
      /// Check whether the token is in the whitelist of an address, 
      /// which can be called TransferFrom to transfer the token under the condition of not being credited.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.BoolValue> IsInWhiteListAsync(global::AElf.Contracts.MultiToken.IsInWhiteListInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsInWhiteListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Check whether the token is in the whitelist of an address, 
      /// which can be called TransferFrom to transfer the token under the condition of not being credited.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.BoolValue> IsInWhiteListAsync(global::AElf.Contracts.MultiToken.IsInWhiteListInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsInWhiteList, null, options, request);
      }
      /// <summary>
      /// Query the information for a lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetLockedAmountOutput GetLockedAmount(global::AElf.Contracts.MultiToken.GetLockedAmountInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLockedAmount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the information for a lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.GetLockedAmountOutput GetLockedAmount(global::AElf.Contracts.MultiToken.GetLockedAmountInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLockedAmount, null, options, request);
      }
      /// <summary>
      /// Query the information for a lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetLockedAmountOutput> GetLockedAmountAsync(global::AElf.Contracts.MultiToken.GetLockedAmountInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLockedAmountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the information for a lock.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.GetLockedAmountOutput> GetLockedAmountAsync(global::AElf.Contracts.MultiToken.GetLockedAmountInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLockedAmount, null, options, request);
      }
      /// <summary>
      /// Query the address of receiving token in cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Address GetCrossChainTransferTokenContractAddress(global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCrossChainTransferTokenContractAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the address of receiving token in cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Address GetCrossChainTransferTokenContractAddress(global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCrossChainTransferTokenContractAddress, null, options, request);
      }
      /// <summary>
      /// Query the address of receiving token in cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Address> GetCrossChainTransferTokenContractAddressAsync(global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCrossChainTransferTokenContractAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the address of receiving token in cross-chain transfer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Address> GetCrossChainTransferTokenContractAddressAsync(global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCrossChainTransferTokenContractAddress, null, options, request);
      }
      /// <summary>
      /// Query the name of the primary Token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.StringValue GetPrimaryTokenSymbol(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrimaryTokenSymbol(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the name of the primary Token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.StringValue GetPrimaryTokenSymbol(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPrimaryTokenSymbol, null, options, request);
      }
      /// <summary>
      /// Query the name of the primary Token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.StringValue> GetPrimaryTokenSymbolAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPrimaryTokenSymbolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the name of the primary Token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.StringValue> GetPrimaryTokenSymbolAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPrimaryTokenSymbol, null, options, request);
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.CalculateFeeCoefficients GetCalculateFeeCoefficientsForContract(global::Google.Protobuf.WellKnownTypes.Int32Value request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCalculateFeeCoefficientsForContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.CalculateFeeCoefficients GetCalculateFeeCoefficientsForContract(global::Google.Protobuf.WellKnownTypes.Int32Value request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCalculateFeeCoefficientsForContract, null, options, request);
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> GetCalculateFeeCoefficientsForContractAsync(global::Google.Protobuf.WellKnownTypes.Int32Value request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCalculateFeeCoefficientsForContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> GetCalculateFeeCoefficientsForContractAsync(global::Google.Protobuf.WellKnownTypes.Int32Value request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCalculateFeeCoefficientsForContract, null, options, request);
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.CalculateFeeCoefficients GetCalculateFeeCoefficientsForSender(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCalculateFeeCoefficientsForSender(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.CalculateFeeCoefficients GetCalculateFeeCoefficientsForSender(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCalculateFeeCoefficientsForSender, null, options, request);
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> GetCalculateFeeCoefficientsForSenderAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCalculateFeeCoefficientsForSenderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the coefficient of the transaction fee calculation formula.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.CalculateFeeCoefficients> GetCalculateFeeCoefficientsForSenderAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCalculateFeeCoefficientsForSender, null, options, request);
      }
      /// <summary>
      /// Query tokens that can pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee GetSymbolsToPayTxSizeFee(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSymbolsToPayTxSizeFee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query tokens that can pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee GetSymbolsToPayTxSizeFee(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSymbolsToPayTxSizeFee, null, options, request);
      }
      /// <summary>
      /// Query tokens that can pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee> GetSymbolsToPayTxSizeFeeAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSymbolsToPayTxSizeFeeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query tokens that can pay transaction fees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee> GetSymbolsToPayTxSizeFeeAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSymbolsToPayTxSizeFee, null, options, request);
      }
      /// <summary>
      /// Query the hash of the last input of ClaimTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Hash GetLatestTotalTransactionFeesMapHash(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLatestTotalTransactionFeesMapHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the hash of the last input of ClaimTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Hash GetLatestTotalTransactionFeesMapHash(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLatestTotalTransactionFeesMapHash, null, options, request);
      }
      /// <summary>
      /// Query the hash of the last input of ClaimTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Hash> GetLatestTotalTransactionFeesMapHashAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLatestTotalTransactionFeesMapHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the hash of the last input of ClaimTransactionFees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Hash> GetLatestTotalTransactionFeesMapHashAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLatestTotalTransactionFeesMapHash, null, options, request);
      }
      /// <summary>
      /// Query the hash of the last input of DonateResourceToken.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Hash GetLatestTotalResourceTokensMapsHash(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLatestTotalResourceTokensMapsHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the hash of the last input of DonateResourceToken.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Hash GetLatestTotalResourceTokensMapsHash(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLatestTotalResourceTokensMapsHash, null, options, request);
      }
      /// <summary>
      /// Query the hash of the last input of DonateResourceToken.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Hash> GetLatestTotalResourceTokensMapsHashAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLatestTotalResourceTokensMapsHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Query the hash of the last input of DonateResourceToken.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Hash> GetLatestTotalResourceTokensMapsHashAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLatestTotalResourceTokensMapsHash, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.BoolValue IsTokenAvailableForMethodFee(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsTokenAvailableForMethodFee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.BoolValue IsTokenAvailableForMethodFee(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsTokenAvailableForMethodFee, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.BoolValue> IsTokenAvailableForMethodFeeAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsTokenAvailableForMethodFeeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.BoolValue> IsTokenAvailableForMethodFeeAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsTokenAvailableForMethodFee, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.StringList GetReservedExternalInfoKeyList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReservedExternalInfoKeyList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.StringList GetReservedExternalInfoKeyList(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReservedExternalInfoKeyList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.StringList> GetReservedExternalInfoKeyListAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReservedExternalInfoKeyListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.StringList> GetReservedExternalInfoKeyListAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReservedExternalInfoKeyList, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TransactionFeeDelegations GetTransactionFeeDelegationsOfADelegatee(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionFeeDelegationsOfADelegatee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AElf.Contracts.MultiToken.TransactionFeeDelegations GetTransactionFeeDelegationsOfADelegatee(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactionFeeDelegationsOfADelegatee, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TransactionFeeDelegations> GetTransactionFeeDelegationsOfADelegateeAsync(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTransactionFeeDelegationsOfADelegateeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AElf.Contracts.MultiToken.TransactionFeeDelegations> GetTransactionFeeDelegationsOfADelegateeAsync(global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactionFeeDelegationsOfADelegatee, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.StringValue GetTokenAlias(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.StringValue GetTokenAlias(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTokenAlias, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.StringValue> GetTokenAliasAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTokenAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.StringValue> GetTokenAliasAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTokenAlias, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.StringValue GetSymbolByAlias(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSymbolByAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.StringValue GetSymbolByAlias(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSymbolByAlias, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.StringValue> GetSymbolByAliasAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSymbolByAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.StringValue> GetSymbolByAliasAsync(global::Google.Protobuf.WellKnownTypes.StringValue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSymbolByAlias, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TokenContractClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TokenContractClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TokenContractBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Issue, serviceImpl.Issue)
          .AddMethod(__Method_Transfer, serviceImpl.Transfer)
          .AddMethod(__Method_TransferFrom, serviceImpl.TransferFrom)
          .AddMethod(__Method_Approve, serviceImpl.Approve)
          .AddMethod(__Method_BatchApprove, serviceImpl.BatchApprove)
          .AddMethod(__Method_UnApprove, serviceImpl.UnApprove)
          .AddMethod(__Method_Lock, serviceImpl.Lock)
          .AddMethod(__Method_Unlock, serviceImpl.Unlock)
          .AddMethod(__Method_Burn, serviceImpl.Burn)
          .AddMethod(__Method_SetPrimaryTokenSymbol, serviceImpl.SetPrimaryTokenSymbol)
          .AddMethod(__Method_CrossChainTransfer, serviceImpl.CrossChainTransfer)
          .AddMethod(__Method_CrossChainReceiveToken, serviceImpl.CrossChainReceiveToken)
          .AddMethod(__Method_CrossChainCreateToken, serviceImpl.CrossChainCreateToken)
          .AddMethod(__Method_InitializeFromParentChain, serviceImpl.InitializeFromParentChain)
          .AddMethod(__Method_ClaimTransactionFees, serviceImpl.ClaimTransactionFees)
          .AddMethod(__Method_ChargeTransactionFees, serviceImpl.ChargeTransactionFees)
          .AddMethod(__Method_ChargeUserContractTransactionFees, serviceImpl.ChargeUserContractTransactionFees)
          .AddMethod(__Method_CheckThreshold, serviceImpl.CheckThreshold)
          .AddMethod(__Method_InitialCoefficients, serviceImpl.InitialCoefficients)
          .AddMethod(__Method_DonateResourceToken, serviceImpl.DonateResourceToken)
          .AddMethod(__Method_ChargeResourceToken, serviceImpl.ChargeResourceToken)
          .AddMethod(__Method_CheckResourceToken, serviceImpl.CheckResourceToken)
          .AddMethod(__Method_SetSymbolsToPayTxSizeFee, serviceImpl.SetSymbolsToPayTxSizeFee)
          .AddMethod(__Method_UpdateCoefficientsForSender, serviceImpl.UpdateCoefficientsForSender)
          .AddMethod(__Method_UpdateCoefficientsForContract, serviceImpl.UpdateCoefficientsForContract)
          .AddMethod(__Method_InitializeAuthorizedController, serviceImpl.InitializeAuthorizedController)
          .AddMethod(__Method_AddAddressToCreateTokenWhiteList, serviceImpl.AddAddressToCreateTokenWhiteList)
          .AddMethod(__Method_RemoveAddressFromCreateTokenWhiteList, serviceImpl.RemoveAddressFromCreateTokenWhiteList)
          .AddMethod(__Method_SetTransactionFeeDelegations, serviceImpl.SetTransactionFeeDelegations)
          .AddMethod(__Method_RemoveTransactionFeeDelegator, serviceImpl.RemoveTransactionFeeDelegator)
          .AddMethod(__Method_RemoveTransactionFeeDelegatee, serviceImpl.RemoveTransactionFeeDelegatee)
          .AddMethod(__Method_SetSymbolAlias, serviceImpl.SetSymbolAlias)
          .AddMethod(__Method_GetTransactionFeeDelegatees, serviceImpl.GetTransactionFeeDelegatees)
          .AddMethod(__Method_GetTokenInfo, serviceImpl.GetTokenInfo)
          .AddMethod(__Method_GetNativeTokenInfo, serviceImpl.GetNativeTokenInfo)
          .AddMethod(__Method_GetResourceTokenInfo, serviceImpl.GetResourceTokenInfo)
          .AddMethod(__Method_GetBalance, serviceImpl.GetBalance)
          .AddMethod(__Method_GetAllowance, serviceImpl.GetAllowance)
          .AddMethod(__Method_GetAvailableAllowance, serviceImpl.GetAvailableAllowance)
          .AddMethod(__Method_IsInWhiteList, serviceImpl.IsInWhiteList)
          .AddMethod(__Method_GetLockedAmount, serviceImpl.GetLockedAmount)
          .AddMethod(__Method_GetCrossChainTransferTokenContractAddress, serviceImpl.GetCrossChainTransferTokenContractAddress)
          .AddMethod(__Method_GetPrimaryTokenSymbol, serviceImpl.GetPrimaryTokenSymbol)
          .AddMethod(__Method_GetCalculateFeeCoefficientsForContract, serviceImpl.GetCalculateFeeCoefficientsForContract)
          .AddMethod(__Method_GetCalculateFeeCoefficientsForSender, serviceImpl.GetCalculateFeeCoefficientsForSender)
          .AddMethod(__Method_GetSymbolsToPayTxSizeFee, serviceImpl.GetSymbolsToPayTxSizeFee)
          .AddMethod(__Method_GetLatestTotalTransactionFeesMapHash, serviceImpl.GetLatestTotalTransactionFeesMapHash)
          .AddMethod(__Method_GetLatestTotalResourceTokensMapsHash, serviceImpl.GetLatestTotalResourceTokensMapsHash)
          .AddMethod(__Method_IsTokenAvailableForMethodFee, serviceImpl.IsTokenAvailableForMethodFee)
          .AddMethod(__Method_GetReservedExternalInfoKeyList, serviceImpl.GetReservedExternalInfoKeyList)
          .AddMethod(__Method_GetTransactionFeeDelegationsOfADelegatee, serviceImpl.GetTransactionFeeDelegationsOfADelegatee)
          .AddMethod(__Method_GetTokenAlias, serviceImpl.GetTokenAlias)
          .AddMethod(__Method_GetSymbolByAlias, serviceImpl.GetSymbolByAlias).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TokenContractBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.CreateInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Issue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.IssueInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Issue));
      serviceBinder.AddMethod(__Method_Transfer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.TransferInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Transfer));
      serviceBinder.AddMethod(__Method_TransferFrom, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.TransferFromInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.TransferFrom));
      serviceBinder.AddMethod(__Method_Approve, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.ApproveInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Approve));
      serviceBinder.AddMethod(__Method_BatchApprove, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.BatchApproveInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.BatchApprove));
      serviceBinder.AddMethod(__Method_UnApprove, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.UnApproveInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UnApprove));
      serviceBinder.AddMethod(__Method_Lock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.LockInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Lock));
      serviceBinder.AddMethod(__Method_Unlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.UnlockInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Unlock));
      serviceBinder.AddMethod(__Method_Burn, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.BurnInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Burn));
      serviceBinder.AddMethod(__Method_SetPrimaryTokenSymbol, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.SetPrimaryTokenSymbolInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SetPrimaryTokenSymbol));
      serviceBinder.AddMethod(__Method_CrossChainTransfer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.CrossChainTransferInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CrossChainTransfer));
      serviceBinder.AddMethod(__Method_CrossChainReceiveToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.CrossChainReceiveTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CrossChainReceiveToken));
      serviceBinder.AddMethod(__Method_CrossChainCreateToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.CrossChainCreateTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CrossChainCreateToken));
      serviceBinder.AddMethod(__Method_InitializeFromParentChain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.InitializeFromParentChainInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.InitializeFromParentChain));
      serviceBinder.AddMethod(__Method_ClaimTransactionFees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.TotalTransactionFeesMap, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ClaimTransactionFees));
      serviceBinder.AddMethod(__Method_ChargeTransactionFees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput, global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput>(serviceImpl.ChargeTransactionFees));
      serviceBinder.AddMethod(__Method_ChargeUserContractTransactionFees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.ChargeTransactionFeesInput, global::AElf.Contracts.MultiToken.ChargeTransactionFeesOutput>(serviceImpl.ChargeUserContractTransactionFees));
      serviceBinder.AddMethod(__Method_CheckThreshold, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.CheckThresholdInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CheckThreshold));
      serviceBinder.AddMethod(__Method_InitialCoefficients, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.InitialCoefficients));
      serviceBinder.AddMethod(__Method_DonateResourceToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.TotalResourceTokensMaps, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DonateResourceToken));
      serviceBinder.AddMethod(__Method_ChargeResourceToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.ChargeResourceTokenInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ChargeResourceToken));
      serviceBinder.AddMethod(__Method_CheckResourceToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CheckResourceToken));
      serviceBinder.AddMethod(__Method_SetSymbolsToPayTxSizeFee, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SetSymbolsToPayTxSizeFee));
      serviceBinder.AddMethod(__Method_UpdateCoefficientsForSender, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.UpdateCoefficientsInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateCoefficientsForSender));
      serviceBinder.AddMethod(__Method_UpdateCoefficientsForContract, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.UpdateCoefficientsInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateCoefficientsForContract));
      serviceBinder.AddMethod(__Method_InitializeAuthorizedController, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.InitializeAuthorizedController));
      serviceBinder.AddMethod(__Method_AddAddressToCreateTokenWhiteList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Address, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.AddAddressToCreateTokenWhiteList));
      serviceBinder.AddMethod(__Method_RemoveAddressFromCreateTokenWhiteList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Address, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.RemoveAddressFromCreateTokenWhiteList));
      serviceBinder.AddMethod(__Method_SetTransactionFeeDelegations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsInput, global::AElf.Contracts.MultiToken.SetTransactionFeeDelegationsOutput>(serviceImpl.SetTransactionFeeDelegations));
      serviceBinder.AddMethod(__Method_RemoveTransactionFeeDelegator, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegatorInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.RemoveTransactionFeeDelegator));
      serviceBinder.AddMethod(__Method_RemoveTransactionFeeDelegatee, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.RemoveTransactionFeeDelegateeInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.RemoveTransactionFeeDelegatee));
      serviceBinder.AddMethod(__Method_SetSymbolAlias, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.SetSymbolAliasInput, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SetSymbolAlias));
      serviceBinder.AddMethod(__Method_GetTransactionFeeDelegatees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesInput, global::AElf.Contracts.MultiToken.GetTransactionFeeDelegateesOutput>(serviceImpl.GetTransactionFeeDelegatees));
      serviceBinder.AddMethod(__Method_GetTokenInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetTokenInfoInput, global::AElf.Contracts.MultiToken.TokenInfo>(serviceImpl.GetTokenInfo));
      serviceBinder.AddMethod(__Method_GetNativeTokenInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.TokenInfo>(serviceImpl.GetNativeTokenInfo));
      serviceBinder.AddMethod(__Method_GetResourceTokenInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.TokenInfoList>(serviceImpl.GetResourceTokenInfo));
      serviceBinder.AddMethod(__Method_GetBalance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetBalanceInput, global::AElf.Contracts.MultiToken.GetBalanceOutput>(serviceImpl.GetBalance));
      serviceBinder.AddMethod(__Method_GetAllowance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetAllowanceInput, global::AElf.Contracts.MultiToken.GetAllowanceOutput>(serviceImpl.GetAllowance));
      serviceBinder.AddMethod(__Method_GetAvailableAllowance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetAllowanceInput, global::AElf.Contracts.MultiToken.GetAllowanceOutput>(serviceImpl.GetAvailableAllowance));
      serviceBinder.AddMethod(__Method_IsInWhiteList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.IsInWhiteListInput, global::Google.Protobuf.WellKnownTypes.BoolValue>(serviceImpl.IsInWhiteList));
      serviceBinder.AddMethod(__Method_GetLockedAmount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetLockedAmountInput, global::AElf.Contracts.MultiToken.GetLockedAmountOutput>(serviceImpl.GetLockedAmount));
      serviceBinder.AddMethod(__Method_GetCrossChainTransferTokenContractAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetCrossChainTransferTokenContractAddressInput, global::AElf.Address>(serviceImpl.GetCrossChainTransferTokenContractAddress));
      serviceBinder.AddMethod(__Method_GetPrimaryTokenSymbol, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.StringValue>(serviceImpl.GetPrimaryTokenSymbol));
      serviceBinder.AddMethod(__Method_GetCalculateFeeCoefficientsForContract, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Int32Value, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients>(serviceImpl.GetCalculateFeeCoefficientsForContract));
      serviceBinder.AddMethod(__Method_GetCalculateFeeCoefficientsForSender, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.CalculateFeeCoefficients>(serviceImpl.GetCalculateFeeCoefficientsForSender));
      serviceBinder.AddMethod(__Method_GetSymbolsToPayTxSizeFee, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.SymbolListToPayTxSizeFee>(serviceImpl.GetSymbolsToPayTxSizeFee));
      serviceBinder.AddMethod(__Method_GetLatestTotalTransactionFeesMapHash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Hash>(serviceImpl.GetLatestTotalTransactionFeesMapHash));
      serviceBinder.AddMethod(__Method_GetLatestTotalResourceTokensMapsHash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Hash>(serviceImpl.GetLatestTotalResourceTokensMapsHash));
      serviceBinder.AddMethod(__Method_IsTokenAvailableForMethodFee, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.BoolValue>(serviceImpl.IsTokenAvailableForMethodFee));
      serviceBinder.AddMethod(__Method_GetReservedExternalInfoKeyList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::AElf.Contracts.MultiToken.StringList>(serviceImpl.GetReservedExternalInfoKeyList));
      serviceBinder.AddMethod(__Method_GetTransactionFeeDelegationsOfADelegatee, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AElf.Contracts.MultiToken.GetTransactionFeeDelegationsOfADelegateeInput, global::AElf.Contracts.MultiToken.TransactionFeeDelegations>(serviceImpl.GetTransactionFeeDelegationsOfADelegatee));
      serviceBinder.AddMethod(__Method_GetTokenAlias, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.StringValue>(serviceImpl.GetTokenAlias));
      serviceBinder.AddMethod(__Method_GetSymbolByAlias, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.StringValue, global::Google.Protobuf.WellKnownTypes.StringValue>(serviceImpl.GetSymbolByAlias));
    }

  }
}
#endregion
